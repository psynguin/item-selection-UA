[{"name":"app.R","content":"# Aplicación Shiny para gestión de ítems psicológicos\r\n# Permite seleccionar/deseleccionar ítems y crear nuevas escalas\r\n\r\nlibrary(shiny)\r\nlibrary(DT)\r\nlibrary(dplyr)\r\nlibrary(shinyjs)\r\nlibrary(shinydashboard)\r\n\r\n# UI\r\nui <- dashboardPage(\r\n    dashboardHeader(title = \"Gestor de Ítems Psicológicos\"),\r\n    dashboardSidebar(\r\n        sidebarMenu(\r\n            menuItem(\"Gestionar Ítems Existentes\", tabName = \"items\", icon = icon(\"list\")),\r\n            menuItem(\"Crear Nueva Escala\", tabName = \"nueva_escala\", icon = icon(\"plus-circle\")),\r\n            menuItem(\"Descargar Datos\", tabName = \"descargar\", icon = icon(\"download\"))\r\n        )\r\n    ),\r\n    dashboardBody(\r\n        useShinyjs(),\r\n        # Agregamos los meta tags para controlar el caché dentro del dashboardBody\r\n        tags$head(\r\n            tags$meta(httpEquiv = \"Cache-Control\", content = \"no-cache, no-store, must-revalidate\"),\r\n            tags$meta(httpEquiv = \"Pragma\", content = \"no-cache\"),\r\n            tags$meta(httpEquiv = \"Expires\", content = \"0\"),\r\n            # Script para forzar recarga si se detecta una nueva versión\r\n            tags$script(HTML(paste0(\"\r\n                const appVersion = '\", format(Sys.time(), \"%Y%m%d%H%M%S\"), \"';\r\n                const lastVersion = localStorage.getItem('appVersion');\r\n                if (lastVersion && lastVersion !== appVersion) {\r\n                  localStorage.setItem('appVersion', appVersion);\r\n                  location.reload(true);\r\n                } else {\r\n                  localStorage.setItem('appVersion', appVersion);\r\n                }\r\n              \")))\r\n        ),\r\n        tabItems(\r\n            # Tab para gestionar ítems existentes\r\n            tabItem(\r\n                tabName = \"items\",\r\n                fluidRow(\r\n                    box(\r\n                        width = 12,\r\n                        title = \"Filtrar Ítems\",\r\n                        status = \"primary\",\r\n                        solidHeader = TRUE,\r\n                        column(\r\n                            width = 3,\r\n                            selectInput(\"filtro_escala\", \"Filtrar por Escala:\", choices = NULL, multiple = TRUE)\r\n                        ),\r\n                        column(\r\n                            width = 3,\r\n                            textInput(\"filtro_texto\", \"Buscar en enunciados:\", \"\")\r\n                        ),\r\n                        column(\r\n                            width = 3,\r\n                            actionButton(\"reset_filtros\", \"Resetear Filtros\", icon = icon(\"refresh\"))\r\n                        ),\r\n                        column(\r\n                            width = 3,\r\n                            actionButton(\"guardar_seleccion\", \"Guardar Selección\", icon = icon(\"save\"),\r\n                                         class = \"btn-success\")\r\n                        )\r\n                    )\r\n                ),\r\n                fluidRow(\r\n                    box(\r\n                        width = 12,\r\n                        title = \"Ítems Disponibles\",\r\n                        status = \"primary\",\r\n                        solidHeader = TRUE,\r\n                        DTOutput(\"tabla_items\"),\r\n                        tags$div(\r\n                            style = \"margin-top: 15px;\",\r\n                            actionButton(\"seleccionar_todos\", \"Seleccionar Todos\", icon = icon(\"check-square\")),\r\n                            actionButton(\"deseleccionar_todos\", \"Deseleccionar Todos\", icon = icon(\"square\"))\r\n                        )\r\n                    )\r\n                )\r\n            ),\r\n\r\n            # Tab para crear nueva escala\r\n            tabItem(\r\n                tabName = \"nueva_escala\",\r\n                fluidRow(\r\n                    box(\r\n                        width = 12,\r\n                        title = \"Definir Nueva Escala\",\r\n                        status = \"primary\",\r\n                        solidHeader = TRUE,\r\n                        column(\r\n                            width = 4,\r\n                            textInput(\"nueva_escala_nombre\", \"Nombre de la Escala:\", \"\"),\r\n                            textInput(\"nueva_escala_id\", \"ID de la Escala (3 caracteres):\", \"\"),\r\n                            actionButton(\"crear_escala\", \"Crear Escala\", class = \"btn-success\", icon = icon(\"plus\"))\r\n                        ),\r\n                        column(\r\n                            width = 8,\r\n                            div(\r\n                                style = \"border-left: 1px solid #ddd; padding-left: 20px; height: 150px;\",\r\n                                h4(\"Instrucciones:\"),\r\n                                p(\"1. Asigne un nombre descriptivo a la nueva escala.\"),\r\n                                p(\"2. Defina un ID único de 3 caracteres (preferiblemente letras mayúsculas).\"),\r\n                                p(\"3. Seleccione los ítems que desea incluir en la nueva escala.\"),\r\n                                p(\"4. Haga clic en 'Crear Escala' para añadirla a la base de datos.\")\r\n                            )\r\n                        )\r\n                    )\r\n                ),\r\n                fluidRow(\r\n                    box(\r\n                        width = 12,\r\n                        title = \"Seleccionar Ítems para la Nueva Escala\",\r\n                        status = \"primary\",\r\n                        solidHeader = TRUE,\r\n                        column(\r\n                            width = 3,\r\n                            selectInput(\"nuevo_filtro_escala\", \"Filtrar por Escala:\", choices = NULL, multiple = TRUE)\r\n                        ),\r\n                        column(\r\n                            width = 3,\r\n                            textInput(\"nuevo_filtro_texto\", \"Buscar en enunciados:\", \"\")\r\n                        ),\r\n                        column(\r\n                            width = 3,\r\n                            actionButton(\"nuevo_reset_filtros\", \"Resetear Filtros\", icon = icon(\"refresh\"))\r\n                        )\r\n                    )\r\n                ),\r\n                fluidRow(\r\n                    box(\r\n                        width = 12,\r\n                        title = \"Ítems Disponibles para la Nueva Escala\",\r\n                        status = \"primary\",\r\n                        solidHeader = TRUE,\r\n                        DTOutput(\"tabla_items_nuevos\"),\r\n                        tags$div(\r\n                            style = \"margin-top: 15px;\",\r\n                            actionButton(\"nuevo_seleccionar_todos\", \"Seleccionar Todos\", icon = icon(\"check-square\")),\r\n                            actionButton(\"nuevo_deseleccionar_todos\", \"Deseleccionar Todos\", icon = icon(\"square\"))\r\n                        )\r\n                    )\r\n                )\r\n            ),\r\n\r\n            # Tab para descargar datos\r\n            tabItem(\r\n                tabName = \"descargar\",\r\n                fluidRow(\r\n                    box(\r\n                        width = 12,\r\n                        title = \"Descargar Datos Actualizados\",\r\n                        status = \"primary\",\r\n                        solidHeader = TRUE,\r\n                        p(\"Descargue la base de datos con los ítems actualizados y las nuevas escalas creadas.\"),\r\n                        downloadButton(\"descargar_csv\", \"Descargar CSV\", class = \"btn-lg btn-success\"),\r\n                        hr(),\r\n                        h4(\"Resumen de Datos:\"),\r\n                        verbatimTextOutput(\"resumen_datos\")\r\n                    )\r\n                )\r\n            )\r\n        )\r\n    )\r\n)\r\n\r\n# Server\r\nserver <- function(input, output, session) {\r\n    # Cargar datos\r\n    datos_reactivos <- reactiveVal()\r\n\r\n    observeEvent(1, {\r\n        # Verificar si el archivo existe, si no, crear datos de ejemplo\r\n        if (file.exists(\"items_psicologicos.csv\")) {\r\n            datos <- read.csv(\"items_psicologicos.csv\", stringsAsFactors = FALSE)\r\n            # Asegurarse de que la columna seleccionado existe\r\n            if (!\"seleccionado\" %in% names(datos)) {\r\n                datos$seleccionado <- 1  # Por defecto, todos seleccionados\r\n            }\r\n        } else {\r\n            # Crear datos de ejemplo si no existe el archivo\r\n            # Esta parte solo se ejecutaría si no hay archivo existente\r\n            datos <- data.frame(\r\n                id_item = paste0(\"EJE\", sprintf(\"%04d\", 1:5)),\r\n                enunciado = c(\r\n                    \"Este es un ítem de ejemplo\",\r\n                    \"Otro ítem de ejemplo\",\r\n                    \"Un tercer ítem ejemplar\",\r\n                    \"Cuarto ítem de prueba\",\r\n                    \"Quinto ítem de muestra\"\r\n                ),\r\n                escala = rep(\"Ejemplo\", 5),\r\n                id_escala = rep(\"EJE\", 5),\r\n                seleccionado = rep(1, 5),\r\n                stringsAsFactors = FALSE\r\n            )\r\n        }\r\n        datos_reactivos(datos)\r\n\r\n        # Actualizar las opciones del filtro de escalas\r\n        escalas_unicas <- unique(datos$escala)\r\n        updateSelectInput(session, \"filtro_escala\", choices = escalas_unicas)\r\n        updateSelectInput(session, \"nuevo_filtro_escala\", choices = escalas_unicas)\r\n    })\r\n\r\n    # Filtrar datos para la tabla principal\r\n    datos_filtrados <- reactive({\r\n        datos <- datos_reactivos()\r\n\r\n        # Aplicar filtro por escala\r\n        if (!is.null(input$filtro_escala) && length(input$filtro_escala) > 0) {\r\n            datos <- datos %>% filter(escala %in% input$filtro_escala)\r\n        }\r\n\r\n        # Aplicar filtro por texto\r\n        if (!is.null(input$filtro_texto) && input$filtro_texto != \"\") {\r\n            datos <- datos %>% filter(grepl(input$filtro_texto, enunciado, ignore.case = TRUE))\r\n        }\r\n\r\n        return(datos)\r\n    })\r\n\r\n    # Filtrar datos para la nueva escala\r\n    datos_filtrados_nuevos <- reactive({\r\n        datos <- datos_reactivos()\r\n\r\n        # Aplicar filtro por escala\r\n        if (!is.null(input$nuevo_filtro_escala) && length(input$nuevo_filtro_escala) > 0) {\r\n            datos <- datos %>% filter(escala %in% input$nuevo_filtro_escala)\r\n        }\r\n\r\n        # Aplicar filtro por texto\r\n        if (!is.null(input$nuevo_filtro_texto) && input$nuevo_filtro_texto != \"\") {\r\n            datos <- datos %>% filter(grepl(input$nuevo_filtro_texto, enunciado, ignore.case = TRUE))\r\n        }\r\n\r\n        return(datos)\r\n    })\r\n\r\n    # Resetear filtros\r\n    observeEvent(input$reset_filtros, {\r\n        updateSelectInput(session, \"filtro_escala\", selected = character(0))\r\n        updateTextInput(session, \"filtro_texto\", value = \"\")\r\n    })\r\n\r\n    observeEvent(input$nuevo_reset_filtros, {\r\n        updateSelectInput(session, \"nuevo_filtro_escala\", selected = character(0))\r\n        updateTextInput(session, \"nuevo_filtro_texto\", value = \"\")\r\n    })\r\n\r\n    # Tabla principal de ítems\r\n    output$tabla_items <- renderDT({\r\n        datos <- datos_filtrados()\r\n\r\n        datatable(\r\n            datos,\r\n            selection = 'none',\r\n            options = list(\r\n                pageLength = 15,\r\n                dom = 'ftip'\r\n            ),\r\n            rownames = FALSE\r\n        ) %>%\r\n            formatStyle(\r\n                'seleccionado',\r\n                target = 'row',\r\n                backgroundColor = styleEqual(c(0, 1), c('#FFCCCC', 'white'))\r\n            )\r\n    })\r\n\r\n    # Manejo de clics en la tabla principal\r\n    observeEvent(input$tabla_items_cell_clicked, {\r\n        info <- input$tabla_items_cell_clicked\r\n        if (length(info) > 0 && !is.na(info$row)) {\r\n            # Obtener los datos actuales\r\n            datos <- datos_reactivos()\r\n            datos_filt <- datos_filtrados()\r\n\r\n            if (info$row <= nrow(datos_filt)) {\r\n                # Obtener el id_item del ítem clicado\r\n                id_item_clicado <- datos_filt$id_item[info$row]\r\n\r\n                # Encontrar este ítem en los datos completos\r\n                idx <- which(datos$id_item == id_item_clicado)\r\n\r\n                if (length(idx) > 0) {\r\n                    # Cambiar el valor de seleccionado\r\n                    datos$seleccionado[idx] <- ifelse(datos$seleccionado[idx] == 1, 0, 1)\r\n                    datos_reactivos(datos)\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    # Configuración para la tabla de ítems para nueva escala\r\n    # Creamos un vector reactivo para almacenar los ítems seleccionados\r\n    items_seleccionados_para_nueva_escala <- reactiveVal(character(0))\r\n\r\n    # Tabla de ítems para nueva escala\r\n    output$tabla_items_nuevos <- renderDT({\r\n        datos <- datos_filtrados_nuevos()\r\n\r\n        # Añadir columna temporal para mostrar si está seleccionado\r\n        datos$esta_seleccionado <- datos$id_item %in% items_seleccionados_para_nueva_escala()\r\n\r\n        dt <- datatable(\r\n            datos,\r\n            selection = 'none',\r\n            options = list(\r\n                pageLength = 15,\r\n                dom = 'ftip'\r\n            ),\r\n            rownames = FALSE\r\n        ) %>%\r\n            formatStyle(\r\n                'esta_seleccionado',\r\n                target = 'row',\r\n                backgroundColor = styleEqual(c(FALSE, TRUE), c('white', '#CCE5FF'))\r\n            )\r\n\r\n        return(dt)\r\n    })\r\n\r\n    # Manejo de clics en la tabla de nuevos ítems\r\n    observeEvent(input$tabla_items_nuevos_cell_clicked, {\r\n        info <- input$tabla_items_nuevos_cell_clicked\r\n\r\n        if (length(info) > 0 && !is.na(info$row)) {\r\n            datos_filt <- datos_filtrados_nuevos()\r\n\r\n            if (info$row <= nrow(datos_filt)) {\r\n                # Obtener el id_item del ítem clicado\r\n                id_item_clicado <- datos_filt$id_item[info$row]\r\n\r\n                # Actualizar la lista de ítems seleccionados\r\n                seleccionados <- items_seleccionados_para_nueva_escala()\r\n\r\n                if (id_item_clicado %in% seleccionados) {\r\n                    # Si ya está en la lista, lo quitamos\r\n                    seleccionados <- seleccionados[seleccionados != id_item_clicado]\r\n                } else {\r\n                    # Si no está en la lista, lo añadimos\r\n                    seleccionados <- c(seleccionados, id_item_clicado)\r\n                }\r\n\r\n                items_seleccionados_para_nueva_escala(seleccionados)\r\n            }\r\n        }\r\n    })\r\n\r\n    # Guardar selección de ítems existentes\r\n    observeEvent(input$guardar_seleccion, {\r\n        showModal(modalDialog(\r\n            title = \"Selección Guardada\",\r\n            \"Los cambios en la selección de ítems han sido guardados en memoria. Para exportar los cambios, use la opción 'Descargar CSV' en la pestaña correspondiente.\",\r\n            easyClose = TRUE,\r\n            footer = modalButton(\"Cerrar\")\r\n        ))\r\n    })\r\n\r\n    # Seleccionar/Deseleccionar todos los ítems\r\n    observeEvent(input$seleccionar_todos, {\r\n        datos <- datos_reactivos()\r\n        datos_filt <- datos_filtrados()\r\n\r\n        # Obtener los id_item de los ítems filtrados\r\n        ids_filtrados <- datos_filt$id_item\r\n\r\n        # Actualizar seleccionado a 1 para todos los ítems filtrados\r\n        datos$seleccionado[datos$id_item %in% ids_filtrados] <- 1\r\n        datos_reactivos(datos)\r\n    })\r\n\r\n    observeEvent(input$deseleccionar_todos, {\r\n        datos <- datos_reactivos()\r\n        datos_filt <- datos_filtrados()\r\n\r\n        # Obtener los id_item de los ítems filtrados\r\n        ids_filtrados <- datos_filt$id_item\r\n\r\n        # Actualizar seleccionado a 0 para todos los ítems filtrados\r\n        datos$seleccionado[datos$id_item %in% ids_filtrados] <- 0\r\n        datos_reactivos(datos)\r\n    })\r\n\r\n    # Seleccionar/Deseleccionar todos para nueva escala\r\n    observeEvent(input$nuevo_seleccionar_todos, {\r\n        # Obtener todos los id_item de los ítems filtrados\r\n        datos_filt <- datos_filtrados_nuevos()\r\n        ids_filtrados <- datos_filt$id_item\r\n\r\n        # Unir con los que ya están seleccionados para evitar duplicados\r\n        items_seleccionados_para_nueva_escala(ids_filtrados)\r\n    })\r\n\r\n    observeEvent(input$nuevo_deseleccionar_todos, {\r\n        # Vaciar la lista de ítems seleccionados\r\n        items_seleccionados_para_nueva_escala(character(0))\r\n    })\r\n\r\n    # Crear nueva escala\r\n    observeEvent(input$crear_escala, {\r\n        # Validar datos de entrada\r\n        if (input$nueva_escala_nombre == \"\" || input$nueva_escala_id == \"\") {\r\n            showModal(modalDialog(\r\n                title = \"Error\",\r\n                \"Debe ingresar un nombre y un ID para la nueva escala.\",\r\n                easyClose = TRUE,\r\n                footer = modalButton(\"Cerrar\")\r\n            ))\r\n            return()\r\n        }\r\n\r\n        if (nchar(input$nueva_escala_id) != 3) {\r\n            showModal(modalDialog(\r\n                title = \"Error\",\r\n                \"El ID de la escala debe tener exactamente 3 caracteres.\",\r\n                easyClose = TRUE,\r\n                footer = modalButton(\"Cerrar\")\r\n            ))\r\n            return()\r\n        }\r\n\r\n        # Obtener ítems seleccionados\r\n        selected_ids <- items_seleccionados_para_nueva_escala()\r\n\r\n        if (length(selected_ids) == 0) {\r\n            showModal(modalDialog(\r\n                title = \"Error\",\r\n                \"Debe seleccionar al menos un ítem para la nueva escala.\",\r\n                easyClose = TRUE,\r\n                footer = modalButton(\"Cerrar\")\r\n            ))\r\n            return()\r\n        }\r\n\r\n        # Obtener datos actuales\r\n        datos <- datos_reactivos()\r\n\r\n        # Verificar si el ID ya existe\r\n        if (input$nueva_escala_id %in% unique(datos$id_escala)) {\r\n            showModal(modalDialog(\r\n                title = \"Error\",\r\n                \"El ID de escala ya existe. Por favor, elija otro ID.\",\r\n                easyClose = TRUE,\r\n                footer = modalButton(\"Cerrar\")\r\n            ))\r\n            return()\r\n        }\r\n\r\n        # Obtener los ítems seleccionados de la base de datos original\r\n        items_seleccionados <- datos[datos$id_item %in% selected_ids, ]\r\n\r\n        # Crear nuevas entradas para estos ítems pero con nueva escala e ID de escala\r\n        nuevos_items <- items_seleccionados\r\n        nuevos_items$escala <- input$nueva_escala_nombre\r\n        nuevos_items$id_escala <- toupper(input$nueva_escala_id)\r\n\r\n        # Generar nuevos IDs para estos ítems\r\n        for (i in 1:nrow(nuevos_items)) {\r\n            nuevos_items$id_item[i] <- paste0(\r\n                nuevos_items$id_escala[i],\r\n                sprintf(\"%04d\", i)\r\n            )\r\n        }\r\n\r\n        # Mantener el valor de seleccionado en 1 para los nuevos ítems\r\n        nuevos_items$seleccionado <- 1\r\n\r\n        # Agregar a la base de datos existente (la base crece)\r\n        datos_actualizados <- rbind(datos, nuevos_items)\r\n        datos_reactivos(datos_actualizados)\r\n\r\n        # Actualizar las opciones del filtro de escalas\r\n        escalas_unicas <- unique(datos_actualizados$escala)\r\n        updateSelectInput(session, \"filtro_escala\", choices = escalas_unicas)\r\n        updateSelectInput(session, \"nuevo_filtro_escala\", choices = escalas_unicas)\r\n\r\n        # Resetear selección\r\n        items_seleccionados_para_nueva_escala(character(0))\r\n\r\n        # Resetear campos\r\n        updateTextInput(session, \"nueva_escala_nombre\", value = \"\")\r\n        updateTextInput(session, \"nueva_escala_id\", value = \"\")\r\n\r\n        # Mostrar mensaje de éxito\r\n        showModal(modalDialog(\r\n            title = \"Éxito\",\r\n            paste0(\"Escala '\", input$nueva_escala_nombre, \"' creada exitosamente con \", length(selected_ids), \" ítems duplicados.\"),\r\n            easyClose = TRUE,\r\n            footer = modalButton(\"Cerrar\")\r\n        ))\r\n    })\r\n\r\n    # Descargar datos\r\n    output$descargar_csv <- downloadHandler(\r\n        filename = function() {\r\n            paste(\"items_psicologicos_actualizados_\", format(Sys.time(), \"%Y%m%d_%H%M\"), \".csv\", sep = \"\")\r\n        },\r\n        content = function(file) {\r\n            write.csv(datos_reactivos(), file, row.names = FALSE)\r\n        }\r\n    )\r\n\r\n    # Resumen de datos\r\n    output$resumen_datos <- renderPrint({\r\n        datos <- datos_reactivos()\r\n\r\n        # Número total de ítems\r\n        n_total <- nrow(datos)\r\n\r\n        # Número de ítems seleccionados\r\n        n_seleccionados <- sum(datos$seleccionado == 1)\r\n\r\n        # Número de escalas\r\n        escalas <- unique(datos$escala)\r\n        n_escalas <- length(escalas)\r\n\r\n        # Distribución de ítems por escala\r\n        distribucion <- table(datos$escala)\r\n\r\n        cat(\"Número total de ítems:\", n_total, \"\\n\")\r\n        cat(\"Ítems seleccionados:\", n_seleccionados, \"\\n\")\r\n        cat(\"Número de escalas:\", n_escalas, \"\\n\\n\")\r\n        cat(\"Distribución de ítems por escala:\\n\")\r\n        print(distribucion)\r\n    })\r\n}\r\n\r\n# Ejecutar la aplicación\r\nshinyApp(ui, server)","type":"text"},{"name":"items_psicologicos.csv","content":"\"id_item\",\"enunciado\",\"escala\",\"id_escala\"\r\n\"AUT0001\",\"Planifico mi tiempo de forma efectiva\",\"Autorregulación\",\"AUT\"\r\n\"AUT0002\",\"Me detengo a reflexionar sobre mis acciones\",\"Autorregulación\",\"AUT\"\r\n\"AUT0003\",\"Evalúo mi progreso regularmente\",\"Autorregulación\",\"AUT\"\r\n\"AUT0004\",\"Puedo mantenerme enfocado incluso con distracciones\",\"Autorregulación\",\"AUT\"\r\n\"AUT0005\",\"Establezco metas claras antes de comenzar una tarea\",\"Autorregulación\",\"AUT\"\r\n\"CRE0001\",\"Los desafíos son oportunidades para crecer\",\"Mentalidad de crecimiento\",\"CRE\"\r\n\"CRE0002\",\"Persisto a pesar de los obstáculos\",\"Mentalidad de crecimiento\",\"CRE\"\r\n\"CRE0003\",\"Los errores son parte del proceso de aprendizaje\",\"Mentalidad de crecimiento\",\"CRE\"\r\n\"CRE0004\",\"Me emociona aprender cosas nuevas\",\"Mentalidad de crecimiento\",\"CRE\"\r\n\"CRE0005\",\"Valoro el esfuerzo más que el resultado inmediato\",\"Mentalidad de crecimiento\",\"CRE\"\r\n\"EFI0001\",\"Confío en mi capacidad para resolver problemas difíciles\",\"Autoeficacia\",\"EFI\"\r\n\"EFI0002\",\"Puedo lograr mis objetivos si me lo propongo\",\"Autoeficacia\",\"EFI\"\r\n\"EFI0003\",\"Soy capaz de manejar situaciones imprevistas\",\"Autoeficacia\",\"EFI\"\r\n\"EFI0004\",\"Me mantengo calmado ante las dificultades\",\"Autoeficacia\",\"EFI\"\r\n\"EFI0005\",\"Puedo encontrar soluciones a la mayoría de problemas\",\"Autoeficacia\",\"EFI\"\r\n\"PER0001\",\"Me mantengo firme en mis objetivos\",\"Perseverancia\",\"PER\"\r\n\"PER0002\",\"La constancia es una de mis fortalezas\",\"Perseverancia\",\"PER\"\r\n\"PER0003\",\"Termino lo que empiezo, sin importar los obstáculos\",\"Perseverancia\",\"PER\"\r\n\"PER0004\",\"Mantengo mi interés en proyectos a largo plazo\",\"Perseverancia\",\"PER\"\r\n\"PER0005\",\"Sigo adelante incluso cuando siento cansancio\",\"Perseverancia\",\"PER\"\r\n\"RES0001\",\"Me recupero rápidamente de los contratiempos\",\"Resiliencia\",\"RES\"\r\n\"RES0002\",\"Salgo fortalecido de las experiencias difíciles\",\"Resiliencia\",\"RES\"\r\n\"RES0003\",\"Me adapto bien a los cambios inesperados\",\"Resiliencia\",\"RES\"\r\n\"RES0004\",\"Aprendo lecciones valiosas de las dificultades\",\"Resiliencia\",\"RES\"\r\n\"RES0005\",\"Mantengo una actitud positiva frente a la adversidad\",\"Resiliencia\",\"RES\"\r\n\"MET0001\",\"Analizo mi forma de pensar regularmente\",\"Metacognición\",\"MET\"\r\n\"MET0002\",\"Identifico cuándo necesito cambiar mi enfoque\",\"Metacognición\",\"MET\"\r\n\"MET0003\",\"Soy consciente de cómo aprendo mejor\",\"Metacognición\",\"MET\"\r\n\"MET0004\",\"Analizo mi forma de pensar regularmente\",\"Metacognición\",\"MET\"\r\n\"MET0005\",\"Reconozco mis fortalezas y debilidades cognitivas\",\"Metacognición\",\"MET\"\r\n\"MOT0001\",\"Me motiva dominar nuevas habilidades\",\"Motivación intrínseca\",\"MOT\"\r\n\"MOT0002\",\"Disfruto el proceso de aprender por sí mismo\",\"Motivación intrínseca\",\"MOT\"\r\n\"MOT0003\",\"Aprendo porque quiero, no solo por obligación\",\"Motivación intrínseca\",\"MOT\"\r\n\"MOT0004\",\"Disfruto el proceso de aprender por sí mismo\",\"Motivación intrínseca\",\"MOT\"\r\n\"MOT0005\",\"Encuentro satisfacción en el esfuerzo\",\"Motivación intrínseca\",\"MOT\"\r\n\"EMO0001\",\"Puedo expresar lo que siento de manera adecuada\",\"Inteligencia emocional\",\"EMO\"\r\n\"EMO0002\",\"Reconozco fácilmente mis emociones\",\"Inteligencia emocional\",\"EMO\"\r\n\"EMO0003\",\"Regulo mis emociones efectivamente\",\"Inteligencia emocional\",\"EMO\"\r\n\"EMO0004\",\"Comprendo las emociones de los demás\",\"Inteligencia emocional\",\"EMO\"\r\n\"EMO0005\",\"Utilizo mis emociones para guiar mis decisiones\",\"Inteligencia emocional\",\"EMO\"\r\n","type":"text"}]
